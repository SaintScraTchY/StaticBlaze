@page "/admin/tags"
@using StaticBlaze.Models
@using StaticBlaze.Services

<PageTitle>Tags - StaticBlaze Admin</PageTitle>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">Tags</h1>
        <a href="/admin/tags/create" class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
            <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            New Tag
        </a>
    </div>

    <div class="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-md">
        <ul role="list" class="divide-y divide-gray-200 dark:divide-gray-700">
            @foreach (var tag in Tags)
            {
                <li>
                    <div class="px-4 py-4 sm:px-6 hover:bg-gray-50 dark:hover:bg-gray-700/50 flex items-center justify-between">
                        <div class="flex-1 min-w-0">
                            <p class="text-sm font-medium text-gray-900 dark:text-white truncate">@tag.Title</p>
                            <p class="text-sm text-gray-500 dark:text-gray-400">@tag.Posts.Count posts</p>
                            <p class="text-xs text-gray-400 dark:text-gray-500">Last updated: @tag.LastUpdated.ToLocalTime().ToString("g")</p>
                        </div>
                        <div class="flex space-x-3">
                            <a href="/admin/tags/edit/@tag.Id" class="text-indigo-600 hover:text-indigo-900 dark:text-indigo-400 dark:hover:text-indigo-300">Edit</a>
                            <button @onclick="() => DeleteTag(tag.Id)" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300">Delete</button>
                        </div>
                    </div>
                </li>
            }
        </ul>
    </div>
</div>

@code {
    private List<Tag> Tags { get; set; } = new();

    [Inject]
    private IBlogService BlogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        Tags = await BlogService.GetTagsAsync();
    }

    private async Task DeleteTag(Guid id)
    {
        if (await BlogService.DeleteTagAsync(id))
        {
            Tags = await BlogService.GetTagsAsync();
        }
    }
}

