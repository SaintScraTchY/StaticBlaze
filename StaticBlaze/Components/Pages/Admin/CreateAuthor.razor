@page "/admin/authors/create"
@page "/admin/authors/edit/{Id}"
@using StaticBlaze.Models
@using StaticBlaze.Services

<PageTitle>@(Id == null ? "Create" : "Edit") Author - StaticBlaze Admin</PageTitle>

<div class="max-w-4xl mx-auto space-y-6">
    <!-- Header -->
    <div>
        <h1 class="text-2xl font-bold text-gray-900 dark:text-white">@(Id == null ? "Create" : "Edit") Author</h1>
        <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">Add or edit author information</p>
    </div>

    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
        <EditForm Model="@author" OnValidSubmit="HandleSubmit" class="space-y-6">
            <DataAnnotationsValidator />

            <!-- Profile Picture -->
            <div class="bg-gray-50 dark:bg-gray-700/50 p-6 rounded-xl">
                <label class="block text-lg font-medium text-gray-700 dark:text-gray-300 mb-4">Profile Picture</label>
                <div class="flex flex-col items-center space-y-4">
                    @if (!string.IsNullOrEmpty(author.ProfilePictureUrl))
                    {
                        <img src="@author.ProfilePictureUrl" class="h-32 w-32 rounded-full object-cover ring-4 ring-indigo-500 ring-offset-4" alt="Profile picture"/>
                    }
                    else
                    {
                        <div class="h-32 w-32 rounded-full bg-indigo-100 dark:bg-indigo-900 flex items-center justify-center ring-4 ring-indigo-500 ring-offset-4">
                            <svg class="h-16 w-16 text-indigo-600 dark:text-indigo-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                            </svg>
                        </div>
                    }
                    <InputFile OnChange="@HandleImageUpload" class="block w-full text-sm text-gray-500 dark:text-gray-400
                        file:mr-4 file:py-3 file:px-6
                        file:rounded-full file:border-0
                        file:text-sm file:font-semibold
                        file:bg-indigo-50 file:text-indigo-700
                        dark:file:bg-indigo-900 dark:file:text-indigo-300
                        hover:file:bg-indigo-100 dark:hover:file:bg-indigo-800
                        transition-all duration-200" />
                </div>
            </div>

            <!-- Name -->
            <div>
                <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Name</label>
                <div class="mt-1">
                    <InputText @bind-Value="author.Name" id="name" 
                              class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white" />
                    <ValidationMessage For="@(() => author.Name)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
                </div>
            </div>

            <!-- Username -->
            <div>
                <label for="username" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Username</label>
                <div class="mt-1">
                    <InputText @bind-Value="author.Username" id="username" 
                              class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white" />
                    <ValidationMessage For="@(() => author.Username)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
                </div>
            </div>

            <!-- Email -->
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Email</label>
                <div class="mt-1">
                    <InputText @bind-Value="author.Email" id="email" type="email"
                              class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white" />
                    <ValidationMessage For="@(() => author.Email)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
                </div>
            </div>

            <!-- Website -->
            <div>
                <label for="website" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Website</label>
                <div class="mt-1">
                    <InputText @bind-Value="author.Website" id="website" 
                              class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white" />
                </div>
            </div>

            <!-- About Me -->
            <div>
                <label for="aboutMe" class="block text-sm font-medium text-gray-700 dark:text-gray-300">About Me</label>
                <div class="mt-1">
                    <InputTextArea @bind-Value="author.AboutMe" id="aboutMe" rows="6"
                                 class="shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white" />
                    <ValidationMessage For="@(() => author.AboutMe)" class="text-red-600 dark:text-red-400 text-sm mt-1" />
                </div>
            </div>

            <!-- Expertise -->
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Expertise</label>
                <div class="mt-2 flex flex-wrap gap-2">
                    @foreach (var expertise in expertiseList)
                    {
                        <div class="@(author.Expertise.Contains(expertise) ? "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200" : "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300") 
                             px-3 py-1 rounded-full text-sm cursor-pointer hover:opacity-80 transition-opacity"
                             @onclick="() => ToggleExpertise(expertise)">
                            @expertise
                        </div>
                    }
                </div>
            </div>

            <!-- Social Links -->
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Social Links</label>
                <div class="mt-2 space-y-2">
                    @for (var i = 0; i < author.SocialLinks.Count; i++)
                    {
                        var index = i;
                        <div class="flex gap-2">
                            <InputText @bind-Value="author.SocialLinks[index]"
                                     class="flex-1 shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 rounded-md dark:bg-gray-700 dark:text-white" />
                            <button type="button" @onclick="() => RemoveSocialLink(index)"
                                    class="inline-flex items-center p-2 border border-transparent rounded-md text-red-600 hover:bg-red-100 dark:hover:bg-red-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                                <svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                            </button>
                        </div>
                    }
                    <button type="button" @onclick="AddSocialLink"
                            class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-indigo-600 dark:text-indigo-400 hover:bg-indigo-50 dark:hover:bg-indigo-900 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        <svg class="-ml-0.5 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                        </svg>
                        Add Social Link
                    </button>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end space-x-3">
                <button type="button" @onclick="NavigateBack"
                        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    Cancel
                </button>
                <button type="submit"
                        class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                    @(Id == null ? "Create" : "Update") Author
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    [Inject]
    private IBlogService BlogService { get; set; } = default!;
    
    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;
    
    [Inject]
    private IGithubService GithubService { get; set; } = default!;

    private Author author = new();
    private readonly List<string> expertiseList = new()
    {
        "C#", ".NET", "JavaScript", "TypeScript", "React", "Angular", "Vue", "Node.js",
        "Python", "Java", "DevOps", "Cloud", "Architecture", "Database", "Mobile", "UI/UX"
    };

    protected override async Task OnInitializedAsync()
    {
        if (Id.HasValue)
        {
            var existingAuthor = await BlogService.GetAuthorByIdAsync(Id.Value);
            if (existingAuthor != null)
            {
                author = existingAuthor;
            }
        }
    }

    private async Task HandleImageUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            var imageUrl = await GithubService.UploadImageToGitHub([],author.Username);
            if (!string.IsNullOrEmpty(imageUrl))
            {
                author.ProfilePictureUrl = imageUrl;
                StateHasChanged();
            }
        }
    }

    private void ToggleExpertise(string expertise)
    {
        if (author.Expertise.Contains(expertise))
        {
            author.Expertise.Remove(expertise);
        }
        else
        {
            author.Expertise.Add(expertise);
        }
    }

    private void AddSocialLink()
    {
        author.SocialLinks.Add("");
    }

    private void RemoveSocialLink(int index)
    {
        if (index >= 0 && index < author.SocialLinks.Count)
        {
            author.SocialLinks.RemoveAt(index);
        }
    }

    private async Task HandleSubmit()
    {
        if (Id.HasValue)
        {
            await BlogService.CreateAuthorAsync(author);
        }
        else
        {
            await BlogService.UpdateAuthorAsync(author);
        }
        
        NavigateBack();
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/admin/authors");
    }
}
